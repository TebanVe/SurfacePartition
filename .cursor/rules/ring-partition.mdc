# Ring Partition Project - Implementation Guidelines

## Project Overview

This project implements the optimization method described in "Partitions of Minimal Length on Manifolds" by Bogosel and Oudet, adapted for a 2D ring (annulus) domain. The goal is to partition a ring into equal area regions while minimizing the total perimeter using a Γ-convergence approach.

## Mathematical Framework

The project uses the energy functional:
- Single phase: J_ε(u) = ε ∫_R |∇u|² + (1/ε) ∫_R u²(1-u)²
- For partitions: Σ_{i=1}^n J_ε(u_i) with constraints:
  - Partition constraint: Σ_{i=1}^n u_i = 1
  - Area constraint: ∫_R u_i = A/n for each partition

## Project Structure

### Core Modules
- `src/ring_mesh.py` - Ring mesh generation and matrix computation
- `src/pyslsqp_optimizer.py` - PySLSQP optimization implementation
- `src/projection_iterative.py` - Constraint projection algorithms
- `src/config.py` - Configuration management
- `src/plot_utils.py` - Visualization utilities

### Example Scripts
- `examples/find_optimal_partition.py` - Main optimization script
- `examples/ring_visualization.py` - Ring visualization

### Configuration
- `parameters/input.yaml` - Default parameters

## Implementation Guidelines

### 1. Reference the Paper
- Always consult `manifold_partition.md` for implementation details
- Follow the mathematical framework and algorithms described in the paper
- Use the paper's notation and formulations consistently
- Implement the Γ-convergence approach as outlined in the paper

### 2. Code Quality
- Follow PEP 8 style guidelines
- Include comprehensive docstrings
- Add type hints where appropriate
- Use meaningful variable names

### 3. Logging and Debugging
- Use detailed logging throughout the optimization process
- Log iteration progress and convergence metrics
- Save intermediate results for debugging

